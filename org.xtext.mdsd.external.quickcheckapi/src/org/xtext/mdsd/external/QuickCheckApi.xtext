grammar org.xtext.mdsd.external.QuickCheckApi with org.eclipse.xtext.common.Terminals

generate quickCheckApi "http://www.xtext.org/mdsd/external/QuickCheckApi"

Builder: 
	"TestBuilder" (models+=Model)* (tests+=Test)+
;

Model:
    "model" name=ID (features+=Feature)*
;

DataType:
    //"datatype" name=ID
	{StringData} "string" ("regex" regex=STRING)? | {IntData} "int" ("regex" regex=STRING)? | {BooleanData} "bool" | {UserData} type=[Model] 
;

Feature:
    name=ID (listof?="list" "of")?  typeData=DataType ("limit" limit=Limit)?
;

Limit:
	{Limit} value=INT
;

Test:
	"Test" name=ID requests+=(Request)+ "Reset" reset=ResetHook
;

ResetHook:
	"driver" "=" driver=Driver "connection-string" "=" con=STRING statement=Statement
;

Driver:
	{Pgsql} "PostgresQL" | {Mysql} "MySQL" | {Sqlight} "SQLight" | {Mssql} "MSSQL"
;

Statement:
	delete=DeleteAction
;

DeleteAction:
	"DELETE" "FROM" tables+=Table ("," tables+=Table)*
;

Table:
	tableName=ID
;

Request:
    "request" name=ID method=Method url=URL ("precondition" preconditions=PreLogicExp)? 
    (params=Param)? body=Body? ("state" action=Action) ("postcondition"postconditions=PostLogicExp)?
;

Action:
	actionOp=ActionOperator value=Json | actionOp=ActionOperator
;

ActionOperator:
	{CreateAction} "create" | {DeleteAction} "delete" | {UpdateAction} "update" | {NoAction} "none"
;


Method:
	{GET} "GET" | {POST} "POST" | {PUT} "PUT" | {PATCH} "PATCH" | {DELETE} "DELETE"	
;

URL:
	protocol=Protocol "://" domain=Domain
;

Domain:
	host=Host (":" port=Port)? "/" (uri=URI)? ("/@" requestID=RequestID)?
;

RequestID:
	name=ID
;

URI:
	name=ID("/" path+=PathPart)*	
;

PathPart:
	part=ID	
;

Host:
	hostParts+=ID ("." hostParts+=ID)* | ips+=INT ("." ips+=INT)*
;

Port:
	{Port} value=INT
;

Protocol:
	"http" | "https"	
;


Param:
	"parameters" pairs+=KVPair (";" pairs+=KVPair)*	
;

KVPair:
	key=Key "=" value=Value 
;

Value:
	ID | INT
;

Key:
	name=ID	
;

Body:
	"body" value=Json
;

Json:
	JsonObject | JsonList
	
;

JsonList returns Json:
	{JsonList} "[" jsonValues+=JsonValue ("," jsonValues+=JsonValue)* "]"
;

JsonObject returns Json:
	{JsonObject} "{" jsonPairs+=JsonPair ("," jsonPairs+=JsonPair)* "}"
;

JsonPair  returns Json:
	{JsonPair} key=STRING ":" value=JsonValue
;

JsonValue returns Json:
	{StringValue} value=STRING | {IntValue} value=INT | {NestedJsonValue} value=JsonObject | {ListJsonValue} value=JsonList
;



PreLogicExp returns Preproposition:
	PreConjunction("OR" {PreDisjunction.left=current} right=PreConjunction)*
;

PreConjunction returns Preproposition:
	Precondition ("AND" {PreConjunction.left=current} right=Precondition)*	
;

Precondition returns Preproposition:
	{ContainsCondition} notOp=NotOp? "contains" value=Json | {EmptyCondition} notOp=NotOp? "empty"
;

PostLogicExp returns Postproposition:
	PostConjunction ("OR" {PostDisjunction.left=current} right=PostConjunction)*
;

PostConjunction returns Postproposition:
	Postcondition ("AND" {PostConjunction.left=current} right=Postcondition)*	
;


Postcondition returns Postproposition:
	{BodyCondition}requestOp=RequestOp requestValue=ResponseBody | {CodeCondition}requestOp=RequestOp statusCode=StatusCode 
;

StatusCode:
	"code" code=INT
;

ResponseBody:
	{ResponseBody} "body" body=Json?
;

RequestOp:
	{RequestOp} notOp=NotOp? "returns"	
;

NotOp:
	"not"	
;