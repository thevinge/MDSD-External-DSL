/*
 * generated by Xtext 2.20.0
 */
package org.xtext.mdsd.external.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.mdsd.external.quickCheckApi.Builder
import org.xtext.mdsd.external.quickCheckApi.Test
import org.xtext.mdsd.external.quickCheckApi.Model
import java.util.List
import org.eclipse.emf.common.util.EList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class QuickCheckApiGenerator extends AbstractGenerator {


	QCBoilerplate boilerplate = new QCBoilerplate;
	QCModelSystem modelSystem = new QCModelSystem;
	QCCmd cmd = new QCCmd;
	QCArbCmd arbCmd = new QCArbCmd;
	QCNextState nextState = new QCNextState;
	QCRunCmd runCmd = new QCRunCmd;
	QCPreconditions preconditions = new QCPreconditions;
	QCMakeFile makeFile = new QCMakeFile;
	QCSetup setup = new QCSetup;
	QCModel model = new QCModel;
	QCGenerator gen = new QCGenerator;
	QCReset reset = new QCReset;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val builder = resource.allContents.filter(Builder).next;
		
		createFile(fsa, builder);
		setupFile(fsa);
		createMakeFile(fsa, builder);
		createBoilerPlate(fsa, builder);
		
	}
	
	def createBoilerPlate(IFileSystemAccess2 fsa,  Builder builder) {
		boilerplate.initBoilerPlateFiles(fsa, builder);
	}
	
	def createMakeFile(IFileSystemAccess2 fsa, Builder builder) {
		fsa.generateFile("Makefile", makeFile.CompileMakeFile(builder));
	}
	
	def setupFile(IFileSystemAccess2 fsa) {
        fsa.generateFile("setup.sh", setup.setup);
    }
	
	
	def createFile(IFileSystemAccess2 fsa, Builder builder) {
		for (test : builder.tests) {
			fsa.generateFile(QCUtils.firstCharLowerCase(test.name) + ".ml", test.compile(builder.models));
		}	
	}
	
	
	def CharSequence compile(Test test, List<Model> models) {
		'''
		«initDependencies(test)»
		
		module APIConf =
		struct
		
		«models.compileModel»
		«test.compileTest»
		 end
		 
		 
		 module APItest = QCSTM.Make(APIConf)
		 ;; 
		 
		 QCheck_runner.run_tests ~verbose:true
		   [APItest.agree_test ~count:10 ~name:"«test.name»"]
		'''
	}
	
	def CharSequence compileModel(List<Model> models) {
		'''
		  «FOR m:models»
			«model.compileModel(m)»
			«gen.compile(m)»
		  «ENDFOR»
		'''
	}
	
	def CharSequence compileTest(Test test) {
		'''
		  type sut = («test.model.modelUnderTest.name» list) ref
		  type state = «test.model.modelUnderTest.name» list
		
		  
		  «cmd.initCmd(test)»
		 
		  «modelSystem.initModelSystem()»
		  
		  «reset.compile(test.reset)»
		  
		  «boilerplate.initUtilities()»
		 
		  «arbCmd.initArb_cmd(test)»
		 
		  «nextState.initNext_State(test)»
		 
		  «runCmd.initRun_cmd(test)»
		 
		  «preconditions.initPreconditions(test)»
		 

		 '''
	
	}
	
	def initDependencies(Test test) {
		'''
		open QCheck
		open Yojson.Basic.Util
		open Curl
		open Format
		open Http
		open «QCUtils.toUpperCaseFunction(test.name)»externals
		'''
	}
	
	
}
